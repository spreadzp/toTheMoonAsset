import { Provider as Nconf } from 'nconf';
import { IConfig as IOclifConfig } from '@oclif/config';
import Mocha from 'mocha';
export interface IEnv {
    API_BASE: string;
    CHAIN_ID: string;
    SEED: string;
    timeout: number;
}
export interface IConfig {
    ride_directory: string;
    test_directory: string;
    envs: {
        testnet: IEnv;
        custom: IEnv;
    };
    defaultEnv: string;
    mocha: Mocha.MochaOptions;
}
export declare const systemConfig: IConfig;
declare class ConfigService {
    oclifConfig?: IOclifConfig;
    initialize(oclifConfig: IOclifConfig): void;
    getConfigPath: (configName: "globalConfig" | "localConfig") => string;
    updateConfig: (configName: "globalConfig" | "localConfig", key: string, value: string) => Promise<string>;
    private generateConfig;
    createLocalConfigFile: () => void;
    getConfig(configName: 'globalConfig' | 'localConfig'): Nconf | {
        error: string;
    };
    readonly config: Nconf;
}
declare const configService: ConfigService;
export default configService;
