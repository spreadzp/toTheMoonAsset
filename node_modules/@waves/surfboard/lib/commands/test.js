"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const fs = tslib_1.__importStar(require("fs"));
const recursive_readdir_1 = tslib_1.__importDefault(require("recursive-readdir"));
const path = tslib_1.__importStar(require("path"));
const command_1 = require("@oclif/command");
const flags = tslib_1.__importStar(require("@oclif/command/lib/flags"));
const config_1 = tslib_1.__importDefault(require("../services/config"));
const testRunner_1 = tslib_1.__importDefault(require("../services/testRunner"));
class Test extends command_1.Command {
    async run() {
        const { args } = this.parse(Test);
        const { flags } = this.parse(Test);
        const testRunnerService = testRunner_1.default.getInstance();
        const workingDirPath = process.cwd();
        const testDirPath = path.join(workingDirPath, config_1.default.config.get('test_directory'));
        if (args.file) {
            const filePath = path.join(testDirPath, args.file);
            if (fs.existsSync(filePath)) {
                testRunnerService.addFile(filePath);
            }
            else {
                this.error('Test file was not found');
            }
        }
        else {
            if (fs.existsSync(testDirPath)) {
                const files = await recursive_readdir_1.default(testDirPath);
                files
                    .filter((file) => path.extname(file) === '.js')
                    .forEach((file) => testRunnerService.addFile(file));
            }
            else {
                this.error('directory with test files does not exists');
            }
        }
        await testRunnerService.run({ envName: flags.env, verbose: flags.verbose });
    }
}
Test.description = 'run test';
Test.args = [
    {
        name: 'file',
        description: 'path to test file'
    }
];
Test.flags = {
    env: flags.string({
        // // char: 'e',
        // name: 'env',
        // default: 'custom',
        description: 'which environment should be used for test'
    }),
    verbose: flags.boolean({
        char: 'v',
        // name: 'env',
        // default: 'custom',
        description: 'logs all transactions and node responses'
    })
};
exports.default = Test;
//# sourceMappingURL=test.js.map