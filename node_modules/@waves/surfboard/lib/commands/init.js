"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const fs = tslib_1.__importStar(require("fs"));
const path = tslib_1.__importStar(require("path"));
const command_1 = require("@oclif/command");
const inquirer = tslib_1.__importStar(require("inquirer"));
const cli_ux_1 = tslib_1.__importDefault(require("cli-ux"));
const utils_1 = require("../utils");
const config_1 = tslib_1.__importDefault(require("../services/config"));
class Init extends command_1.Command {
    constructor() {
        super(...arguments);
        this.initWorkingDir = async () => {
            cli_ux_1.default.action.start('Project initialization');
            const workingDirPath = process.cwd();
            const rideDirPath = path.join(workingDirPath, config_1.default.config.get('ride_directory'));
            const testDirPath = path.join(workingDirPath, config_1.default.config.get('test_directory'));
            config_1.default.createLocalConfigFile();
            fs.mkdirSync(rideDirPath, { recursive: true });
            const rideUrl = 'https://raw.githubusercontent.com/wavesplatform/ride-examples/master/ride4dapps/wallet/ride/wallet.ride';
            const rideFilePath = './ride/wallet.ride';
            try {
                await utils_1.downloadHttps(rideUrl, rideFilePath);
            }
            catch (e) {
                console.error('Failed to download ride example file');
            }
            fs.mkdirSync(testDirPath, { recursive: true });
            const testUrl = 'https://raw.githubusercontent.com/wavesplatform/ride-examples/master/ride4dapps/wallet/test/wallet.js';
            const testFilePath = './test/wallet.ride-test.js';
            try {
                await utils_1.downloadHttps(testUrl, testFilePath);
            }
            catch (e) {
                console.error('Failed to download test example file');
            }
            cli_ux_1.default.action.stop();
        };
        this.run = async () => {
            const workingDirPath = process.cwd();
            const workingDirContent = fs.readdirSync(workingDirPath);
            if (workingDirContent.length) {
                this.warn(`
        This directory is non-empty. 
        Configuration file and content of ride or test directories could be overwritten.
    `);
                let responses = await inquirer.prompt([{
                        name: 'shouldInitialize',
                        message: 'Continue project initialization anyway?',
                        type: 'confirm',
                        default: false
                    }]);
                if (responses.shouldInitialize) {
                    await this.initWorkingDir();
                }
                else {
                    this.log('Project initialization is cancelled');
                }
            }
            else {
                await this.initWorkingDir();
            }
        };
    }
}
Init.description = 'initialize new Ride project';
exports.default = Init;
//# sourceMappingURL=init.js.map