"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const command_1 = tslib_1.__importStar(require("@oclif/command"));
const cli_ux_1 = tslib_1.__importDefault(require("cli-ux"));
const config_1 = tslib_1.__importDefault(require("../../services/config"));
class Show extends command_1.default {
    async run() {
        const { args, flags } = this.parse(Show);
        const configName = flags.global
            ? 'globalConfig'
            : 'localConfig';
        const config = config_1.default.getConfig(configName);
        if ('error' in config) {
            cli_ux_1.default.error(config.error);
            return;
        }
        cli_ux_1.default.styledHeader(configName);
        let result;
        if (args.key) {
            const key = args.key.replace(/\./g, ':');
            result = config.get(key);
        }
        else {
            result = config.get();
        }
        if (result === undefined) {
            cli_ux_1.default.error(`Failed to get key:"${args.key}" from config`);
        }
        cli_ux_1.default.styledJSON(result);
    }
}
Show.description = 'show config';
Show.flags = {
    global: command_1.flags.boolean({
        char: 'g',
        description: 'Show global config'
    })
};
Show.args = [
    {
        name: 'key',
        description: 'Config option key in dot notation'
    }
];
exports.default = Show;
//# sourceMappingURL=show.js.map