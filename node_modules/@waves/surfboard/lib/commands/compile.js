"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const command_1 = require("@oclif/command");
const cli_ux_1 = tslib_1.__importDefault(require("cli-ux"));
const ride_js_1 = require("@waves/ride-js");
const flags = tslib_1.__importStar(require("@oclif/command/lib/flags"));
const testRunner_1 = tslib_1.__importDefault(require("../services/testRunner"));
class Compile extends command_1.Command {
    constructor() {
        super(...arguments);
        this.compile = async (file) => {
            const resultOrError = ride_js_1.compile(file);
            if ('error' in resultOrError) {
                throw new Error(resultOrError.error);
            }
            return resultOrError;
        };
    }
    async run() {
        const { args } = this.parse(Compile);
        const { flags } = this.parse(Compile);
        const testRunnerService = testRunner_1.default.getInstance();
        if (args.file) {
            let file;
            try {
                file = testRunnerService.getContractFile(args.file);
            }
            catch (error) {
                this.error(error.message);
            }
            if (file) {
                this.compile(file)
                    .then((result) => {
                    if (flags.fullInfo) {
                        cli_ux_1.default.styledJSON({
                            base64: result.result.base64,
                            size: result.result.size,
                            complexity: result.result.complexity
                        });
                    }
                    else {
                        cli_ux_1.default.log(result.result.base64);
                    }
                })
                    .catch((error) => {
                    cli_ux_1.default.styledHeader(`${args.file} was not compiled`);
                    console.error('Error message:', error.message);
                });
            }
        }
    }
}
Compile.description = 'compile ride file';
Compile.args = [
    {
        name: 'file',
        description: 'path to ride file',
        required: true
    }
];
Compile.flags = {
    fullInfo: flags.boolean({
        description: 'outputs JSON with additional info. Such as complexity, size etc.'
    })
};
exports.default = Compile;
//# sourceMappingURL=compile.js.map